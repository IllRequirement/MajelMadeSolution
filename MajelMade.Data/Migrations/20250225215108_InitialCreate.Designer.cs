// <auto-generated />
using System;
using MajelMade.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace majelmade.data.Migrations
{
    [DbContext(typeof(MajelMadeDbContext))]
    [Migration("20250225215108_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MajelMade.Domain.Entities.AddressType", b =>
                {
                    b.Property<int>("AddressTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressTypeID"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressTypeID");

                    b.ToTable("AddressTypes");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.CustomerAddress", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AddressTypeID")
                        .HasColumnType("int");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("AddressID");

                    b.HasIndex("AddressTypeID");

                    b.HasIndex("CustomerID");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.CustomerEmail", b =>
                {
                    b.Property<int>("EmailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailID"));

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("EmailID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("EmailTypeID");

                    b.ToTable("CustomerEmails");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.CustomerPhone", b =>
                {
                    b.Property<int>("PhoneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhoneID"));

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneTypeID")
                        .HasColumnType("int");

                    b.HasKey("PhoneID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("PhoneTypeID");

                    b.ToTable("CustomerPhones");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.EmailType", b =>
                {
                    b.Property<int>("EmailTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailTypeID"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmailTypeID");

                    b.ToTable("EmailType");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeID"));

                    b.Property<string>("CodeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeePositionID")
                        .HasColumnType("int");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("EmployeeID");

                    b.HasIndex("EmployeePositionID");

                    b.HasIndex("UserID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.EmployeePosition", b =>
                {
                    b.Property<int>("EmployeePositionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeePositionID"));

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeePositionID");

                    b.ToTable("EmployeePositions");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.Equipment", b =>
                {
                    b.Property<int>("EquipmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentID"));

                    b.Property<string>("CodeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquipmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EquipmentStatusID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastMaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModelNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NextMaintenanceDue")
                        .HasColumnType("datetime2");

                    b.Property<int>("ScannableLabelID")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EquipmentID");

                    b.HasIndex("EquipmentStatusID");

                    b.HasIndex("ScannableLabelID");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.EquipmentLog", b =>
                {
                    b.Property<int>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogID"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Duration")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("EquipmentID")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentLogTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LogID");

                    b.HasIndex("EquipmentID");

                    b.HasIndex("EquipmentLogTypeID");

                    b.ToTable("EquipmentLogs");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.EquipmentLogType", b =>
                {
                    b.Property<int>("EquipmentLogTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentLogTypeID"));

                    b.Property<string>("LogTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EquipmentLogTypeID");

                    b.ToTable("EquipmentLogTypes");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.EquipmentStatus", b =>
                {
                    b.Property<int>("EquipmentStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentStatusID"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EquipmentStatusID");

                    b.ToTable("EquipmentStatuses");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.Inventory", b =>
                {
                    b.Property<int>("InventoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryID"));

                    b.Property<string>("CodeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CostPerUnit")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("InventoryCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeasurementUnitID")
                        .HasColumnType("int");

                    b.Property<int?>("ScannableLabelID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("InventoryID");

                    b.HasIndex("InventoryCategoryID");

                    b.HasIndex("MeasurementUnitID");

                    b.HasIndex("ScannableLabelID");

                    b.HasIndex("UserID");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.InventoryBatch", b =>
                {
                    b.Property<int>("InventoryBatchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryBatchID"));

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InventoryID")
                        .HasColumnType("int");

                    b.Property<int>("MeasurementUnitID")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ScannableLabelID")
                        .HasColumnType("int");

                    b.Property<int>("StorageLocationID")
                        .HasColumnType("int");

                    b.HasKey("InventoryBatchID");

                    b.HasIndex("InventoryID");

                    b.HasIndex("MeasurementUnitID");

                    b.HasIndex("ScannableLabelID");

                    b.HasIndex("StorageLocationID");

                    b.ToTable("InventoryBatches");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.InventoryCategory", b =>
                {
                    b.Property<int>("InventoryCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryCategoryID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InventoryCategoryID");

                    b.ToTable("InventoryCategories");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.InventoryTransaction", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionID"));

                    b.Property<int>("InventoryBatchID")
                        .HasColumnType("int");

                    b.Property<int>("InventoryTransactionTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("QuantityChange")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TransactionID");

                    b.HasIndex("InventoryBatchID");

                    b.ToTable("InventoryTransactions");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.InventoryTransactionType", b =>
                {
                    b.Property<int>("InventoryTransactionTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryTransactionTypeID"));

                    b.Property<string>("TransactionTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InventoryTransactionTypeID");

                    b.ToTable("InventoryTransactionTypes");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationID"));

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScannableLabelID")
                        .HasColumnType("int");

                    b.HasKey("LocationID");

                    b.HasIndex("ScannableLabelID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.MeasurementUnit", b =>
                {
                    b.Property<int>("MeasurementUnitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeasurementUnitID"));

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeasurementUnitID");

                    b.ToTable("MeasurementUnits");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.ModificationType", b =>
                {
                    b.Property<int>("ModificationTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModificationTypeID"));

                    b.Property<string>("ModificationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ModificationTypeID");

                    b.ToTable("ModificationTypes");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<string>("CodeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerComments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryInstructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("RequiresShipping")
                        .HasColumnType("bit");

                    b.Property<int>("ScannableLabelID")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("OrderTypeID");

                    b.HasIndex("ScannableLabelID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.OrderItem", b =>
                {
                    b.Property<int>("OrderItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemID"));

                    b.Property<string>("CodeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RecipeID")
                        .HasColumnType("int");

                    b.HasKey("OrderItemID");

                    b.HasIndex("OrderID");

                    b.HasIndex("RecipeID");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.OrderStatusHistory", b =>
                {
                    b.Property<int>("OrderStatusHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderStatusHistoryID"));

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("StatusTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderStatusHistoryID");

                    b.HasIndex("OrderID");

                    b.HasIndex("StatusTypeID");

                    b.ToTable("OrderStatusHistories");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.OrderType", b =>
                {
                    b.Property<int>("OrderTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderTypeID"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderTypeID");

                    b.ToTable("OrderTypes");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.PackedItem", b =>
                {
                    b.Property<int>("PackedItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackedItemID"));

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderItemID")
                        .HasColumnType("int");

                    b.Property<int>("PackingID")
                        .HasColumnType("int");

                    b.Property<int>("QuantityPacked")
                        .HasColumnType("int");

                    b.HasKey("PackedItemID");

                    b.HasIndex("OrderItemID");

                    b.HasIndex("PackingID");

                    b.ToTable("PackedItems");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.PackingDetails", b =>
                {
                    b.Property<int>("PackingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackingID"));

                    b.Property<DateTime?>("EndPackingTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("PackedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartPackingTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalPackedItems")
                        .HasColumnType("int");

                    b.HasKey("PackingID");

                    b.HasIndex("OrderID");

                    b.HasIndex("PackedByUserID");

                    b.ToTable("PackingDetails");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.PhoneType", b =>
                {
                    b.Property<int>("PhoneTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhoneTypeID"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PhoneTypeID");

                    b.ToTable("PhoneTypes");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.Recipe", b =>
                {
                    b.Property<int>("RecipeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecipeID"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EstimatedCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("EstimatedPrepTimeMinutes")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Instructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServingSize")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("RecipeID");

                    b.HasIndex("UserID");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.RecipeEquipment", b =>
                {
                    b.Property<int>("RecipeEquipmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecipeEquipmentID"));

                    b.Property<int>("EquipmentID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipeID")
                        .HasColumnType("int");

                    b.HasKey("RecipeEquipmentID");

                    b.HasIndex("EquipmentID");

                    b.HasIndex("RecipeID");

                    b.ToTable("RecipeEquipment");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.RecipeIngredient", b =>
                {
                    b.Property<int>("RecipeIngredientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecipeIngredientID"));

                    b.Property<string>("CodeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InventoryID")
                        .HasColumnType("int");

                    b.Property<int>("MeasurementUnitID")
                        .HasColumnType("int");

                    b.Property<bool>("NeedsReorder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("QuantityRequired")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("RecipeID")
                        .HasColumnType("int");

                    b.HasKey("RecipeIngredientID");

                    b.HasIndex("InventoryID");

                    b.HasIndex("MeasurementUnitID");

                    b.HasIndex("RecipeID");

                    b.ToTable("RecipeIngredients");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.RecipeStep", b =>
                {
                    b.Property<int>("RecipeStepID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecipeStepID"));

                    b.Property<string>("AdditionalNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("EstimatedCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("EstimatedTimeMinutes")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("RecipeID")
                        .HasColumnType("int");

                    b.Property<int>("StepNumber")
                        .HasColumnType("int");

                    b.HasKey("RecipeStepID");

                    b.HasIndex("RecipeID");

                    b.ToTable("RecipeSteps");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.RecipeStepLog", b =>
                {
                    b.Property<int>("RecipeStepLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecipeStepLogID"));

                    b.Property<decimal>("ActualCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("ActualTimeMinutes")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExecutedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RecipeStepID")
                        .HasColumnType("int");

                    b.HasKey("RecipeStepLogID");

                    b.HasIndex("RecipeStepID");

                    b.ToTable("RecipeStepLogs");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.Room", b =>
                {
                    b.Property<int>("RoomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomID"));

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScannableLabelID")
                        .HasColumnType("int");

                    b.HasKey("RoomID");

                    b.HasIndex("ScannableLabelID");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.ScannableLabel", b =>
                {
                    b.Property<int>("LabelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LabelID"));

                    b.Property<string>("BarcodeValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LabelType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LabelID");

                    b.ToTable("ScannableLabels");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.Shipping", b =>
                {
                    b.Property<int>("ShippingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShippingID"));

                    b.Property<DateTime?>("ExpectedDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<decimal>("ShippingCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShippingMethodTypeID")
                        .HasColumnType("int");

                    b.Property<int>("StatusTypeID")
                        .HasColumnType("int");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShippingID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ShippingMethodTypeID");

                    b.HasIndex("StatusTypeID");

                    b.ToTable("Shipping");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.ShippingMethodType", b =>
                {
                    b.Property<int>("ShippingMethodTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShippingMethodTypeID"));

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShippingMethodTypeID");

                    b.ToTable("ShippingMethodTypes");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.SpecialOrderDetail", b =>
                {
                    b.Property<int>("SpecialOrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecialOrderDetailID"));

                    b.Property<int>("InventoryID")
                        .HasColumnType("int");

                    b.Property<int>("MeasurementUnitID")
                        .HasColumnType("int");

                    b.Property<decimal>("ModificationCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ModificationTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("SpecialOrderDetailID");

                    b.HasIndex("InventoryID");

                    b.HasIndex("MeasurementUnitID");

                    b.HasIndex("ModificationTypeID");

                    b.HasIndex("OrderID");

                    b.ToTable("SpecialOrderDetails");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.StatusType", b =>
                {
                    b.Property<int>("StatusTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusTypeID"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusTypeID");

                    b.ToTable("StatusTypes");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.StorageLocation", b =>
                {
                    b.Property<int>("StorageLocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StorageLocationID"));

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.HasKey("StorageLocationID");

                    b.HasIndex("LocationID");

                    b.HasIndex("RoomID");

                    b.ToTable("StorageLocations");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.Table", b =>
                {
                    b.Property<int>("TableID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TableID"));

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsCombinable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("SeatCapacity")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TableID");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.TableCombination", b =>
                {
                    b.Property<int>("TableComboID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TableComboID"));

                    b.Property<int>("CombinedWithTableID")
                        .HasColumnType("int");

                    b.Property<int>("TableID")
                        .HasColumnType("int");

                    b.HasKey("TableComboID");

                    b.HasIndex("CombinedWithTableID");

                    b.HasIndex("TableID");

                    b.ToTable("TableCombinations");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("RoleID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.CustomerAddress", b =>
                {
                    b.HasOne("MajelMade.Domain.Entities.AddressType", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MajelMade.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressType");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.CustomerEmail", b =>
                {
                    b.HasOne("MajelMade.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerEmails")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MajelMade.Domain.Entities.EmailType", "EmailType")
                        .WithMany()
                        .HasForeignKey("EmailTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("EmailType");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.CustomerPhone", b =>
                {
                    b.HasOne("MajelMade.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerPhones")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MajelMade.Domain.Entities.PhoneType", "PhoneType")
                        .WithMany()
                        .HasForeignKey("PhoneTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("PhoneType");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.Employee", b =>
                {
                    b.HasOne("MajelMade.Domain.Entities.EmployeePosition", "EmployeePosition")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeePositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MajelMade.Domain.Entities.User", "User")
                        .WithMany("Employees")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EmployeePosition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.Equipment", b =>
                {
                    b.HasOne("MajelMade.Domain.Entities.EquipmentStatus", null)
                        .WithMany("Equipment")
                        .HasForeignKey("EquipmentStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MajelMade.Domain.Entities.ScannableLabel", "ScannableLabel")
                        .WithMany()
                        .HasForeignKey("ScannableLabelID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ScannableLabel");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.EquipmentLog", b =>
                {
                    b.HasOne("MajelMade.Domain.Entities.Equipment", "Equipment")
                        .WithMany("EquipmentLogs")
                        .HasForeignKey("EquipmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MajelMade.Domain.Entities.EquipmentLogType", "EquipmentLogType")
                        .WithMany("EquipmentLogs")
                        .HasForeignKey("EquipmentLogTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("EquipmentLogType");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.Inventory", b =>
                {
                    b.HasOne("MajelMade.Domain.Entities.InventoryCategory", "InventoryCategory")
                        .WithMany("Inventories")
                        .HasForeignKey("InventoryCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MajelMade.Domain.Entities.MeasurementUnit", null)
                        .WithMany()
                        .HasForeignKey("MeasurementUnitID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MajelMade.Domain.Entities.ScannableLabel", "ScannableLabel")
                        .WithMany()
                        .HasForeignKey("ScannableLabelID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MajelMade.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InventoryCategory");

                    b.Navigation("ScannableLabel");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.InventoryBatch", b =>
                {
                    b.HasOne("MajelMade.Domain.Entities.Inventory", "Inventory")
                        .WithMany("InventoryBatches")
                        .HasForeignKey("InventoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MajelMade.Domain.Entities.MeasurementUnit", null)
                        .WithMany()
                        .HasForeignKey("MeasurementUnitID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MajelMade.Domain.Entities.ScannableLabel", "ScannableLabel")
                        .WithMany()
                        .HasForeignKey("ScannableLabelID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MajelMade.Domain.Entities.StorageLocation", "StorageLocation")
                        .WithMany("InventoryBatches")
                        .HasForeignKey("StorageLocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("ScannableLabel");

                    b.Navigation("StorageLocation");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.InventoryTransaction", b =>
                {
                    b.HasOne("MajelMade.Domain.Entities.InventoryBatch", "InventoryBatch")
                        .WithMany("InventoryTransactions")
                        .HasForeignKey("InventoryBatchID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InventoryBatch");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.Location", b =>
                {
                    b.HasOne("MajelMade.Domain.Entities.ScannableLabel", "ScannableLabel")
                        .WithMany()
                        .HasForeignKey("ScannableLabelID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ScannableLabel");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.Order", b =>
                {
                    b.HasOne("MajelMade.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MajelMade.Domain.Entities.OrderType", "OrderType")
                        .WithMany()
                        .HasForeignKey("OrderTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MajelMade.Domain.Entities.ScannableLabel", "ScannableLabel")
                        .WithMany()
                        .HasForeignKey("ScannableLabelID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MajelMade.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("OrderType");

                    b.Navigation("ScannableLabel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("MajelMade.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MajelMade.Domain.Entities.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.OrderStatusHistory", b =>
                {
                    b.HasOne("MajelMade.Domain.Entities.Order", "Order")
                        .WithMany("OrderStatusHistories")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MajelMade.Domain.Entities.StatusType", "StatusType")
                        .WithMany()
                        .HasForeignKey("StatusTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("StatusType");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.PackedItem", b =>
                {
                    b.HasOne("MajelMade.Domain.Entities.OrderItem", "OrderItem")
                        .WithMany()
                        .HasForeignKey("OrderItemID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MajelMade.Domain.Entities.PackingDetails", "PackingDetails")
                        .WithMany("PackedItems")
                        .HasForeignKey("PackingID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderItem");

                    b.Navigation("PackingDetails");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.PackingDetails", b =>
                {
                    b.HasOne("MajelMade.Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MajelMade.Domain.Entities.User", "PackedByUser")
                        .WithMany()
                        .HasForeignKey("PackedByUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PackedByUser");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.Recipe", b =>
                {
                    b.HasOne("MajelMade.Domain.Entities.User", "User")
                        .WithMany("Recipes")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.RecipeEquipment", b =>
                {
                    b.HasOne("MajelMade.Domain.Entities.Equipment", "Equipment")
                        .WithMany("RecipeEquipment")
                        .HasForeignKey("EquipmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MajelMade.Domain.Entities.Recipe", "Recipe")
                        .WithMany("RecipeEquipment")
                        .HasForeignKey("RecipeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.RecipeIngredient", b =>
                {
                    b.HasOne("MajelMade.Domain.Entities.Inventory", null)
                        .WithMany()
                        .HasForeignKey("InventoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MajelMade.Domain.Entities.MeasurementUnit", null)
                        .WithMany()
                        .HasForeignKey("MeasurementUnitID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MajelMade.Domain.Entities.Recipe", "Recipe")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("RecipeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.RecipeStep", b =>
                {
                    b.HasOne("MajelMade.Domain.Entities.Recipe", "Recipe")
                        .WithMany("RecipeSteps")
                        .HasForeignKey("RecipeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.RecipeStepLog", b =>
                {
                    b.HasOne("MajelMade.Domain.Entities.RecipeStep", "RecipeStep")
                        .WithMany()
                        .HasForeignKey("RecipeStepID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RecipeStep");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.Room", b =>
                {
                    b.HasOne("MajelMade.Domain.Entities.ScannableLabel", "ScannableLabel")
                        .WithMany()
                        .HasForeignKey("ScannableLabelID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ScannableLabel");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.Shipping", b =>
                {
                    b.HasOne("MajelMade.Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MajelMade.Domain.Entities.ShippingMethodType", "ShippingMethodType")
                        .WithMany()
                        .HasForeignKey("ShippingMethodTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MajelMade.Domain.Entities.StatusType", "StatusType")
                        .WithMany()
                        .HasForeignKey("StatusTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ShippingMethodType");

                    b.Navigation("StatusType");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.SpecialOrderDetail", b =>
                {
                    b.HasOne("MajelMade.Domain.Entities.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MajelMade.Domain.Entities.MeasurementUnit", null)
                        .WithMany()
                        .HasForeignKey("MeasurementUnitID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MajelMade.Domain.Entities.ModificationType", "ModificationType")
                        .WithMany()
                        .HasForeignKey("ModificationTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MajelMade.Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("ModificationType");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.StorageLocation", b =>
                {
                    b.HasOne("MajelMade.Domain.Entities.Location", "Location")
                        .WithMany("StorageLocations")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MajelMade.Domain.Entities.Room", "Room")
                        .WithMany("StorageLocations")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.TableCombination", b =>
                {
                    b.HasOne("MajelMade.Domain.Entities.Table", "CombinedWithTable")
                        .WithMany("CombinedWithTableCombinations")
                        .HasForeignKey("CombinedWithTableID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MajelMade.Domain.Entities.Table", "Table")
                        .WithMany("PrimaryTableCombinations")
                        .HasForeignKey("TableID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CombinedWithTable");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.User", b =>
                {
                    b.HasOne("MajelMade.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.Customer", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("CustomerEmails");

                    b.Navigation("CustomerPhones");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.EmployeePosition", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.Equipment", b =>
                {
                    b.Navigation("EquipmentLogs");

                    b.Navigation("RecipeEquipment");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.EquipmentLogType", b =>
                {
                    b.Navigation("EquipmentLogs");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.EquipmentStatus", b =>
                {
                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.Inventory", b =>
                {
                    b.Navigation("InventoryBatches");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.InventoryBatch", b =>
                {
                    b.Navigation("InventoryTransactions");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.InventoryCategory", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.Location", b =>
                {
                    b.Navigation("StorageLocations");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("OrderStatusHistories");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.PackingDetails", b =>
                {
                    b.Navigation("PackedItems");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.Recipe", b =>
                {
                    b.Navigation("RecipeEquipment");

                    b.Navigation("RecipeIngredients");

                    b.Navigation("RecipeSteps");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.Room", b =>
                {
                    b.Navigation("StorageLocations");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.StorageLocation", b =>
                {
                    b.Navigation("InventoryBatches");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.Table", b =>
                {
                    b.Navigation("CombinedWithTableCombinations");

                    b.Navigation("PrimaryTableCombinations");
                });

            modelBuilder.Entity("MajelMade.Domain.Entities.User", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Orders");

                    b.Navigation("Recipes");
                });
#pragma warning restore 612, 618
        }
    }
}
